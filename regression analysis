import matplotlib.pyplot as plt
import matplotlib
import numpy as np
import os
import datetime
import scipy.io
from scipy import stats

mat= scipy.io.loadmat("C:\Users\yourname\Documents\file_location\GFED4s_BA_2003to2012_025deg.mat")
mat

LON_GFED = mat['LON025']
LAT_GFED = mat['LAT025']
time_GFED= mat['time']

BA_km025 = mat ['Burned_025']
BA_sum_km = np.nansum(BA_km025, axis=0)
np.shape(BA_sum_km)

np.shape(LON_GFED)
print LON_GFED[175, 300]

os.chdir("C:\Users\yourname\Documents\yourfilelocation\sfmc")
files= os.listdir('.')
print files
SFMC= np.empty((np.size9(files), 112, 244))
for i, fil in enumerate(files):
  local_filename = os.path.join('', fil)
  test = np.fromfile(local_filename, '>f32')
  test2 = np.reshape(test, (np.size(test)/(244*112), 112, 244))
  test2 = [test2 == -999] = np.NAN
  test3 = np.nanmean(test2, axis=0)
  SFMC[i,:,:] = test3
  
latitude_GDAP = np.arrange(23.875, 23.875, + 112 * 0.25, 0.25)
np.size(latitude_GDAP)

longitude_GDAP = np.arramge(-126.875, - 126.875, + 244 * 0.25, 0.25)
LAT_GDAP, LON_GDAP = np.meshgrid(latitude_GDAP, longitude_GDAP, sparse = False, indexing = 'ij')

lat_GFED = LON_GFED[:]
print lat_GFED.max(), lat_GFED.min()

lon_GFED = lon_GFED[:]
print lon_GFED.max(), lon_GFED.min()

lat_GDAP = lat_GDAP[:]
print lat_GDAP.max(), lat_GDAP.min()

lon_GDAP = lon_GDAP[:]
print lon_GFED.max(), lon_GDAP.min()

print "LON_GDAP", LON_GDAP[57,30]
print "LAT_GDAP", LAT_GDAP[57,30]
print "LON_GFED", LON_GFED[512, 242]
print "LAT_GFED", LAT_GFED[512, 242]

t=matplotlib.dates.drange(datetime.date(2003, 1, 15), datetime.date(2014, 6, 15), datetime.timedelta(days=30.42))

GFED_US = BA_km025[:,456:568, 212:456]

SFMC_US = SFMC[0:120]

print np.shape(GFED_US)
print np.shape(SFMC_US)

whos

GFED_US[0,0,0]

SMFC_US[0,0,0]

x_range = []
x = 0
while x<244:
  x_range.append(x)
  x = x+1
  
y_range = []
y=0
while y< 112:
  y_range.append(y)
  y=y +1
  
for i in time_range:
  for j in y_range:
    for k in x_range:
      if np.isnan(SFMC_US[i,j,k]) ==True:
        if GFED_US[i,j,k] = np.nan
        
GFED_US

coef_list = []

for i in y_range:
  for j in x_range:
    dataSFMC = SFMC_US[:,i,j]
    dataGFED = GFED_US[:,i,j]
    corr = np.corrcoef(dataSFMC, dataGFED)
    coef = corr [0] [1]
    coef_list.append(coef)
    
coef_array = np.array(coef_list)

coef_map = np.reshape(coef_array, (1,112,244))
plot.pcolor(coef_map[0,:,:], cmap= 'RdBu', vmin= -1.00, vmax= 1.00)
cbar= plt.colorbar()
cbar.set_label('Correlation Coefficient')
plt.show()

regr_list=[]
for i in y_range:
  for j in X_range:
    dataSFMC = SFMC_US[:,i,j]
    dataGFED = GFED_US[:,i,j]
    regr= scipy.stats.linregress (dataSFMC, dataGFED)
    regr_list.append(regr[0])
    
regr_array = np.array(regr_list)

regr_map = np.reshape(regr_array, (1, 112, 244))

id_list =[]
for num in regr_list:
  if np.isnan(num) == False:
    id_list.append(num)
print max(id_list)
print min(id_list)

std= np.std(id_list)
mean= np.mean(id_list)
minimum = mean - (2*std)
maximum = mean + (2*std)

figure = plot.figure()
figure.patch.set_facecolor("white")
plt.pcolor(LON_GDAP, LAT_GDAP, regr_map[0,:,:], cmap='jet', vmin = minimum, vmax= maximium)
cbar= plt.colorbar()
cbar.set_label ("Regression Slope")
plt.axis([-126.875, -66.125, 23.875, 51.625])
plt.xlabel("Degrees Longitude")
plt.ylabel("Degrees Latitude")
plt.title('Linear Regression', fontsize=28, fontweight="bold')
plt.show()

SFMC03 = SFMC_US[0:12,:,:]
SFMC04 = SFMC_US[12:24,:,:]
SFMC05 = SFMC_US[24:36,:,:]
SFMC06 = SFMC_US[36:48,:,:]
SFMC07 = SFMC_US[48:60,:,:]
SFMC08 = SFMC_US[60:72,:,:]
SFMC09 = SFMC_US[72:84,:,:]
SFMC10 = SFMC_US[84:96,:,:]
SFMC11 = SFMC_US[96:108,:,:]
SFMC12 = SFMC_US[108:120,:,:]

GFED03 = GFED_US[0:12,:,:]
GFED04 = GFED_US[12:24,:,:]
GFED05 = GFED_US[24:36,:,:]
GFED06 = GFED_US[36:48,:,:]
GFED07 = GFED_US[48:60,:,:]
GFED08 = GFED_US[60:72,:,:]
GFED09 = GFED_US[72:84,:,:]
GFED10 = GFED_US[84:96,:,:]
GFED11 = GFED_US[96:108,:,:]
GFED12 = GFED_US[108:120,:,:

S_yr_list = [SFMC03,SFMC04,SFMC05,SFMC06,SFMC07,SFMC08,SFMC09,SFMC10,SFMC11,SFMC12]
G_yr_list = [GFED03,GFED04,GFED05,GFED06,GFED07,GFED08,GFED09,GFED10,GFED11,GFED12]

GFED_avg = []
for G_yr in G_yr_list:
    for i in y_range:
        for j in x_range:
            GFEDavg = np.nanmean(G_yr[:,i,j])
            GFED_avg.append(GFEDavg)
            
GFED_arr = np.array(GFED_avg)
GFED_map = np.reshape(GFED_arr, (10,112,244))

SFMC_avg = []
for S_yr in S_yr_list:
    for i in y_range:
        for j in x_range:
            SFMCavg = np.nanmean(S_yr[:,i,j])
            SFMC_avg.append(SFMCavg)
SFMC_arr = np.array(SFMC_avg)
SFMC_map = np.reshape(SFMC_arr, (10,112,244))

plt.pcolor(SFMC_map[0,:,:], cmap='RdBu',vmin= -1, vmax = 1)
cbar = plt.colorbar()
plt.show()

x = [0,1,2,3,4,5,6,7,8,9]
y = GFED_map[:,51,123]
y2 = SFMC_map[:,51,123]

fig = plt.figure()
rect = fig.patch
rect.set_facecolor('white')
ax = fig.add_subplot(111)
ax.plot(x, y, label = 'GFED Burned area')
ax2 = ax.twinx()
ax2.set_ylim([0,0.5])
ax.set_ylim([0,20])
ax.yaxis.label.set_color('blue')
ax2.yaxis.label.set_color('red')
ax.set_xlabel("Time (month)")
ax.set_ylabel("Burned Area (km^2)")
ax2.set_ylabel("Surface Soil Moisture (%)")
ax2.plot(x, y2, '-r', label = 'Soil Moisture')
ax.legend(loc=2).draggable()
ax2.legend(loc=0).draggable()
plt.show()

print LON_GDAP[52, 68]
print LAT_GDAP[52, 68]

coef_list_avg = []
for i in y_range:
    for j in x_range:
        corr_avg =  np.corrcoef(SFMC_map[:,i,j], GFED_map[:,i,j])
        coef_avg = corr_avg[0][1]
        coef_list_avg.append(coef_avg)
        
coef_array_avg = np.array(coef_list_avg)
coef_map_avg = np.reshape(coef_array_avg,(1, 112, 244))

figure = plt.figure()
figure.patch.set_facecolor("white")
plt.pcolor(LON_GDAP, LAT_GDAP, coef_map_avg[0,:,:], cmap='RdBu',vmin= -1.00, vmax = 1.00)
cbar = plt.colorbar()
cbar.set_label("Pearson's Correlation Coefficient")
plt.axis([-126.875, -66.125, 23.875, 51.625])
plt.xlabel("Degrees Longitude")
plt.ylabel("Degrees Latitude")
plt.title('Annual Average Correlation', fontsize=26, fontweight='bold')
plt.show()

regr_list_avg = []
for i in y_range:
    for j in x_range:
        regr_avg = scipy.stats.linregress(SFMC_map[:,i,j], GFED_map[:,i,j])
        regr_list_avg.append(regr_avg[0])       
        
regr_arr_avg = np.array(regr_list_avg)
regr_map_avg = np.reshape(regr_arr_avg,(1, 112, 244))

id_list_avg = []
for num in regr_list_avg:
    if np.isnan(num) == False:
        id_list_avg.append(num)
print max(id_list_avg)
print min(id_list_avg)

std_avg = np.std(id_list_avg)
mean_avg = np.mean(id_list_avg)
minimum_avg = mean_avg - (2*std_avg)
maximum_avg = mean_avg + (2*std_avg)

figure = plt.figure()
figure.patch.set_facecolor("white")
plt.pcolor(LON_GDAP, LAT_GDAP, regr_map_avg[0,:,:], cmap='jet',vmin= minimum_avg, vmax = maximum_avg)
cbar = plt.colorbar()
cbar.set_label("Regression Slope")
plt.axis([-126.875, -66.125, 23.875, 51.625])
plt.xlabel("Degrees Longitude")
plt.ylabel("Degrees Latitude")
plt.title('Regression Analysis - Annual Avg', fontsize=22, fontweight='bold')
plt.show()




    
    
